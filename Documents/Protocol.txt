通讯协议：

---------------------------------------------------------------------------

一、数据包说明：

通讯过程中，大多数数据都采用一种通用的封装方法：先发送4字节（32位整数）表示数据大小（字节数），再发送对应大小的数据。

---------------------------------------------------------------------------

二、程序说明：

包含两个程序：
(1) CMS - 一般运行在Web服务器上。用于集中控制IDS，向Web提供管理接口。
(2) IDS - 运行在IDS设备上，用于设备与CMS之间的通讯，接受CMS监控。

---------------------------------------------------------------------------

三、启动过程：

1、首先启动CMS，它开启两个端口：
 (1) 管理端口（默认10101），Web连接到此端口（不用SSL），发送控制命令；
 (2) 通讯端口（默认10102），IDS连接到此端口（使用SSL），接受监控；

2、然后启动各个IDS，它不开端口，仅通过SSL连上CMS（10102端口）；

3、当IDS连上CMS后，首先发送8个字节（"NetPower"），用以区分其他非法程序；

4、然后，IDS将自身的ID（用以区分其他IDS的唯一标识）作为一个数据包发给CMS；

5、此后，保持该连接，IDS等待CMS发送各种命令。

---------------------------------------------------------------------------

四、保活过程：

1、CMS在保持与IDS之间的连接时，每隔一段时间（如5秒），发送四个字节"Noop"（保活命令），以判断该连接是否还存在；

2、IDS接收到该保活命令后不做任何处理。

---------------------------------------------------------------------------

五、Web管理过程：

1、Web通过PHP的socket程序，连接上CMS（10101端口）；

2、CMS在收到Web的连接时，应检查该IP是否合法（CMS的IP允许配置文件见后），若不合法则直接断开连接；

3、Web发送8个字节（"NetPower"），用以区分其他非法程序；

4、Web发送4个字节（"List"、"Send"、"File"或"Down"），用以确定命令类型；

 (1) 对于"List"命令，Web再发送一个数据包（包含一个字符串）：
   (a) 若字符串为空，表示查询在线设备数目；
       其结果格式为（假设有10台设备）：
       {
         "error" : 0,
         "message" : "",
         "result" : {
           "device_count" : 10
         }
       }
   (b) 若字符串为"*"，表示获取所有设备的信息；
   (c) 若字符串为数字（设为n），表示在线设备列表中第n个设备的信息；
   (d) 字符串还能为一个数字段（例如11-20），表示获取在线列表中对应序号的设备信息；
       设备详细信息的格式如下：
       {
         "error" : 0,
         "message" : "",
         "result" : {
           "list" : (
             { "id" : "ids1",  "ip" : "192.168.1.101" },
             { "id" : "ids2",  "ip" : "192.168.1.102" },
             ...
           )
         }
       }

 (2) 对于"Send"命令，Web会接着发送一个数据包（包含一个字符串），为IDS的标识；
     然后，Web再发送一个数据包。CMS不关心数据包的具体内容，而将该数据包直接转发给对应的IDS；
     转发时，CMS首先向IDS发送4个字节"Send"，然后再发送该命令内容数据包；
     IDS接收后进行解析和执行，然后将结果以一个数据包的形式发回；

 (3) 对于"File"命令，Web会接着发送一个数据包（包含一个字符串），为IDS的标识；
     然后，Web再发送一个数据包。同"Send"命令类似，CMS不关心该内容，而直接将数据包转发给对应的IDS；
     再然后，Web再发送一个数据包（包含一个字符串），为要传输的文件名（相对路径，相对于CMS的工作目录）；
     转发过程：CMS打开该文件后，首先向IDS发送4个字节"File"，接着以一个数据包转发命令内容，然后将文件名作为一个数据包发给IDS，然后将文件内容作为一个数据包再发给IDS。

 (4) 对于"Down"命令，Web会接着发送一个数据包（包含一个字符串），为IDS的标识；
     然后，Web会发送一个数据包（包含一个字符串），表示要下载的文件名；
     之后，CMS会首先向IDS发送4个字节"Down"命令，然后发送一个数据包（字符串）表示文件名；
     IDS接收到后，会打开文件，若成功，则返回4个字节的0，表示没有错误，否则返回4个字节的错误码。之后将文件内容数据发送回CMS。CMS接收到以后，将其保存在工作目录中。
     CMS下载完成后，以一个数据包形式返回一个JSON结果给Web。

5、处理完命令后，CMS将结果字符串以一个数据包的形式，发回给Web。该结果字符串，以类似如下的JSON形式，方便Web解析：
  {
    "error" : 0,
    "message" : "",
    "result" : {
      "name1" : "value1",
      "name2" : "value2",
      ...
    }
  }
  其中，error为0时表示没有错误，message为错误具体说明文字，result下的各项内容根据各命令自行定义。

---------------------------------------------------------------------------

六、IDS接收的命令数据包：

1、Web通过CMS发送给IDS的命令数据包，类似如下格式：
  SetHostInfo
  name:ids1
  desc:第一台IDS设备
  ip:192.168.1.101
  mask:255.255.255.0
  gateway:192.168.1.1
在该格式中，第一行为命令名，以下各行分别表示各个参数（半角冒号前为参数名，冒号后为值）

2、IDS接收到来自CMS的命令（"Send"或"File"）后，解析其中的命令字符串；

3、对于"File"命令，IDS会再接收文件名的数据包，以及文件内容的数据包，然后将该文件存入自己的工作目录中（文件名与CMS方一致）；

4、IDS解析出命令后，根据配置文件，调用相应的脚本，并传入相应参数；

5、将脚本执行完的结果字符串（JSON格式），以一个数据包的形式，发送回CMS；

6、随后CMS会将该内容原样发回Web（同样是以一个数据包的形式），从而完成一次Web对IDS的监控操作。

---------------------------------------------------------------------------

七、CMS的IP允许配置文件（iplist.txt）

1、该文件为文本文件，每行写一个允许的IP地址；

2、IP地址允许使用通配符（即半角星号），用以替代0～255的任一数字（例如：192.168.0.* 或 *.*.*.*）；

3、IP地址允许使用连字符（即半角减号），用以替代一个数字段（例如：192.168.0.51-199）；

4、若该文件不存在，或该文件为空，则表示只允许来自本地（即127.0.0.1）的连接。

---------------------------------------------------------------------------

八、IDS关于执行脚本的配置文件：

1、该配置文件类似于Makefile，如下格式：
SetHostInfo:
	SetHostInfo.sh $(name) $(desc) $(ip) $(mask) $(gateway)
SetServerState:
	SetServerState.sh $(state)

2、命令名从一行开头起，以半角冒号结束，之后的一行表示该命令对应要执行的脚本（这几行都以"\t"字符开头）；

3、每个$符号开头，并用小括号包住的标识符，为需要传给脚本的参数。IDS将解析的结果进行替换，然后执行该脚本；

4、若一行以#开头，则表示为注释行。

---------------------------------------------------------------------------

